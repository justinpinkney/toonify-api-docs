{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Toonify API Welcome to the documentation for the Toonify API! We provide API access to the Toonification model made famous by Toonify Yourself and other models too. The API is accessible through RapidAPI (who take care of all the authentication and billing for us). Please sign up for an API key first. If you have an API key then take a look at our Getting Started tutorial . Or if you just want to start making request check out our interactive endpoint explorer to start getting results staight away. Warning The RapidAPI interactive endpoint explorer does not properly send requests as multipart/form-data. It won't work, so please don't use it. If you've got any feedback please create an issue on GitHub , or reach out to me on Twitter .","title":"Toonify API"},{"location":"#toonify-api","text":"Welcome to the documentation for the Toonify API! We provide API access to the Toonification model made famous by Toonify Yourself and other models too. The API is accessible through RapidAPI (who take care of all the authentication and billing for us). Please sign up for an API key first. If you have an API key then take a look at our Getting Started tutorial . Or if you just want to start making request check out our interactive endpoint explorer to start getting results staight away. Warning The RapidAPI interactive endpoint explorer does not properly send requests as multipart/form-data. It won't work, so please don't use it. If you've got any feedback please create an issue on GitHub , or reach out to me on Twitter .","title":"Toonify API"},{"location":"getting-started/","text":"Warning There seems to be an issue with the RapidAPI interactive endpoint explorer not properly sending requests as multipart/form-data. Make sure you use this guide as your reference for testing the API as the code snippets generated by RapidAPI don't work. Instead, please visit our own interactive endpoint page . Info All the examples below use the v0/toonify endpoint for the original Toonify model. We have other models available at different endpoints. The expected parameters etc. are all the identical between the models, so the examples should work simply by changing the url. First steps The following example uses the Python library Requests to send an image file for toonification. If the Accept header is application/json the response will be json, with images base64 encoded. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" headers = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers ) print ( response . json ()) will return a json response like this: { \"num_faces\" : 1 , \"b64_encoded_output\" : \"BASE64_IMAGE_HERE\" , \"b64_encoded_aligned\" : \"\" } Note When returning a json response all images are base64 encoded and returned as a string. Here's an example of how to read one of these into a PIL Image in Python: import base64 from io import BytesIO from PIL import Image b64_encoded_output = \"BASE64_IMAGE_HERE\" file_like = BytesIO ( base64 . b64decode ( b64_encoded_output )) image = Image . open ( file_like ) image . show () Returning an image If you want an image directly returned then set the Accept header to image/jpeg . Here is an example using curl for variety. curl -X POST \"https://toonify.p.rapidapi.com/v0/toonify\" -H \"accept: image/jpeg\" -H \"Content-Type: multipart/form-data\" -H \"x-rapidapi-host: toonify.p.rapidapi.com\" -H \"x-rapidapi-key: KEY_HERE\" -F \"image=@test.jpg;type=image/jpeg\" Returning aligned image If you want to return the cropped and aligned face as well as the toonified result you can pass a query parameter of return_aligned=True . If the return type is json then the aligned face will be returned base64 encoded in the b64_encoded_aligned field. If the return type is an image then the two images will be horizontally concatenated and returned. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"face_index\" : 1 , \"return_aligned\" : \"true\" , } headers = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"image/jpeg\" } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( reponse . content ) #will be the jpeg image bytes Next take a look at the various options you have: More Options","title":"Getting started"},{"location":"getting-started/#first-steps","text":"The following example uses the Python library Requests to send an image file for toonification. If the Accept header is application/json the response will be json, with images base64 encoded. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" headers = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers ) print ( response . json ()) will return a json response like this: { \"num_faces\" : 1 , \"b64_encoded_output\" : \"BASE64_IMAGE_HERE\" , \"b64_encoded_aligned\" : \"\" } Note When returning a json response all images are base64 encoded and returned as a string. Here's an example of how to read one of these into a PIL Image in Python: import base64 from io import BytesIO from PIL import Image b64_encoded_output = \"BASE64_IMAGE_HERE\" file_like = BytesIO ( base64 . b64decode ( b64_encoded_output )) image = Image . open ( file_like ) image . show ()","title":"First steps"},{"location":"getting-started/#returning-an-image","text":"If you want an image directly returned then set the Accept header to image/jpeg . Here is an example using curl for variety. curl -X POST \"https://toonify.p.rapidapi.com/v0/toonify\" -H \"accept: image/jpeg\" -H \"Content-Type: multipart/form-data\" -H \"x-rapidapi-host: toonify.p.rapidapi.com\" -H \"x-rapidapi-key: KEY_HERE\" -F \"image=@test.jpg;type=image/jpeg\"","title":"Returning an image"},{"location":"getting-started/#returning-aligned-image","text":"If you want to return the cropped and aligned face as well as the toonified result you can pass a query parameter of return_aligned=True . If the return type is json then the aligned face will be returned base64 encoded in the b64_encoded_aligned field. If the return type is an image then the two images will be horizontally concatenated and returned. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"face_index\" : 1 , \"return_aligned\" : \"true\" , } headers = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"image/jpeg\" } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( reponse . content ) #will be the jpeg image bytes Next take a look at the various options you have: More Options","title":"Returning aligned image"},{"location":"models/","text":"We currently provide API access to 4 different models. Note the different models consume different numbers of Credits for each API call NEW ! Toonmoji HD Credits per call = 100 Endpoint: v0/toonmojihd Produces a realistic emoji style image at 1024x1024 resolution Only available on the ULTRA and MEGA subscriptions NEW ! Caricature HD Credits per call = 100 Endpoint: v0/caricaturehd Produces a caricature style image at 1024x1024 resolution Only available on the ULTRA and MEGA subscriptions NEW ! Comic HD Credits per call = 100 Endpoint: v0/comichd Produces a comic style image at 1024x1024 resolution Only available on the ULTRA and MEGA subscriptions Toonify HD Credits per call = 100 Endpoint: v0/toonifyhd Produces a toonify style image at 1024x1024 resolution Only available on the ULTRA and MEGA subscriptions Comic Credits per call = 4 Endpoint: v0/comic Produces a comic book hero style image Caricature Credits per call = 4 Endpoint: v0/caricature Produces a caricature style image Toonify Credits per call = 2 Endpoint: v0/toonify The original Toonify model Emojify Credits per call = 4 Endpoint: v0/emojify Produces an emoji style image Zombify Credits per call = 4 Endpoint: v0/zombify Zombie model from https://makemeazombie.com/ Toonifyplus Credits per call = 4 Endpoint: v0/toonifyplus Toon style image more faithful to original features and more noise resistant Halloweenify Credits per call = 4 Endpoint: v0/halloweenify Zombie/horror like appearance","title":"Models"},{"location":"models/#toonmoji-hd","text":"Credits per call = 100 Endpoint: v0/toonmojihd Produces a realistic emoji style image at 1024x1024 resolution Only available on the ULTRA and MEGA subscriptions NEW !","title":"Toonmoji HD"},{"location":"models/#caricature-hd","text":"Credits per call = 100 Endpoint: v0/caricaturehd Produces a caricature style image at 1024x1024 resolution Only available on the ULTRA and MEGA subscriptions NEW !","title":"Caricature HD"},{"location":"models/#comic-hd","text":"Credits per call = 100 Endpoint: v0/comichd Produces a comic style image at 1024x1024 resolution Only available on the ULTRA and MEGA subscriptions","title":"Comic HD"},{"location":"models/#toonify-hd","text":"Credits per call = 100 Endpoint: v0/toonifyhd Produces a toonify style image at 1024x1024 resolution Only available on the ULTRA and MEGA subscriptions","title":"Toonify HD"},{"location":"models/#comic","text":"Credits per call = 4 Endpoint: v0/comic Produces a comic book hero style image","title":"Comic"},{"location":"models/#caricature","text":"Credits per call = 4 Endpoint: v0/caricature Produces a caricature style image","title":"Caricature"},{"location":"models/#toonify","text":"Credits per call = 2 Endpoint: v0/toonify The original Toonify model","title":"Toonify"},{"location":"models/#emojify","text":"Credits per call = 4 Endpoint: v0/emojify Produces an emoji style image","title":"Emojify"},{"location":"models/#zombify","text":"Credits per call = 4 Endpoint: v0/zombify Zombie model from https://makemeazombie.com/","title":"Zombify"},{"location":"models/#toonifyplus","text":"Credits per call = 4 Endpoint: v0/toonifyplus Toon style image more faithful to original features and more noise resistant","title":"Toonifyplus"},{"location":"models/#halloweenify","text":"Credits per call = 4 Endpoint: v0/halloweenify Zombie/horror like appearance","title":"Halloweenify"},{"location":"more-options/","text":"In the previous example you saw one query parameter that you can pass return_aligned to receive the original cropped face or not. There are a few other parameters that the API currently exposes: face_index (default: 0) crop_edges (default: 0) proceed_without_face (default: False) Indexing faces One of the json response fields is num_faces this tells you how many faces were detected in the original image. If there are multiple faces in the image then you can toonify all of them by passing an extra query parameter of face_index . This zero based index controls which detected face will be sent for toonifcation. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"face_index\" : 1 , # Process the second face in the image } headers = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( response . json ()) Cropping edges The original model processes images at 512x512 pixels. Sometimes these edges are quite low quality, especially if the original image is a tight crop. You can remove these and get a (slightly) faster response time by setting the crop_edges parameter to be greater than 0. Generally 16 is a good value, but multiples of 8 are recommended. Behaviour when no face is found The proceed_without_face parameter controls the behaviour if no face is found. By default if no face is found the API returns an error. If you set proceed_without_face to be True, we will simply resize and process the full original image as is, the quality in this case is likely to not be good. Example with all the options import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" headers = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , } query = { \"face_index\" : 1 , # Process the second face in the image \"crop_edges\" : 16 , # crop a 16 pixel border from the image \"proceed_without_face\" : True , # Process even when no face is found } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( response . json ()) Next see tips and considerations in using the API.","title":"More options"},{"location":"more-options/#indexing-faces","text":"One of the json response fields is num_faces this tells you how many faces were detected in the original image. If there are multiple faces in the image then you can toonify all of them by passing an extra query parameter of face_index . This zero based index controls which detected face will be sent for toonifcation. import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" query = { \"face_index\" : 1 , # Process the second face in the image } headers = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( response . json ())","title":"Indexing faces"},{"location":"more-options/#cropping-edges","text":"The original model processes images at 512x512 pixels. Sometimes these edges are quite low quality, especially if the original image is a tight crop. You can remove these and get a (slightly) faster response time by setting the crop_edges parameter to be greater than 0. Generally 16 is a good value, but multiples of 8 are recommended.","title":"Cropping edges"},{"location":"more-options/#behaviour-when-no-face-is-found","text":"The proceed_without_face parameter controls the behaviour if no face is found. By default if no face is found the API returns an error. If you set proceed_without_face to be True, we will simply resize and process the full original image as is, the quality in this case is likely to not be good.","title":"Behaviour when no face is found"},{"location":"more-options/#example-with-all-the-options","text":"import requests url = \"https://toonify.p.rapidapi.com/v0/toonify\" headers = { \"x-rapidapi-host\" : \"toonify.p.rapidapi.com\" , \"x-rapidapi-key\" : \"KEY_HERE\" , \"accept\" : \"application/json\" , } query = { \"face_index\" : 1 , # Process the second face in the image \"crop_edges\" : 16 , # crop a 16 pixel border from the image \"proceed_without_face\" : True , # Process even when no face is found } files = { \"image\" : open ( \"imagefile.jpg\" , \"rb\" )} response = requests . request ( \"POST\" , url , files = files , headers = headers , params = query ) print ( response . json ()) Next see tips and considerations in using the API.","title":"Example with all the options"},{"location":"tips-and-considerations/","text":"Please note The current model costs 2 credits per use. We expect to introduce other models for both more and fewer credits in future. This works out around 45 cents per thousand uses for one of the prepaid bundles. If you're interested in different pricing bundles then please contact us. Inference time is around 7 seconds. I could to much to improve this is there is sufficient demand and usage. We expect to release other models, for different transformations and also different resolutions. If you're interested in something please let us know! If you want to see examples of the current Toonify model being used look at https://toonify.justinpinkney.com The RapidAPI endpoint interface doesn't appear to send mulipart/form data properly, so doesn't work. Please see our code examples for reference. How to get good results Make sure the original image is fairly high quality (e.g. face is around 512x512 pixels) Faces in the image which are below around 128x128 pixels are unlikely to be found Straight on faces work best, side on faces aren't likely to be found.","title":"Tips and considerations"},{"location":"tips-and-considerations/#please-note","text":"The current model costs 2 credits per use. We expect to introduce other models for both more and fewer credits in future. This works out around 45 cents per thousand uses for one of the prepaid bundles. If you're interested in different pricing bundles then please contact us. Inference time is around 7 seconds. I could to much to improve this is there is sufficient demand and usage. We expect to release other models, for different transformations and also different resolutions. If you're interested in something please let us know! If you want to see examples of the current Toonify model being used look at https://toonify.justinpinkney.com The RapidAPI endpoint interface doesn't appear to send mulipart/form data properly, so doesn't work. Please see our code examples for reference.","title":"Please note"},{"location":"tips-and-considerations/#how-to-get-good-results","text":"Make sure the original image is fairly high quality (e.g. face is around 512x512 pixels) Faces in the image which are below around 128x128 pixels are unlikely to be found Straight on faces work best, side on faces aren't likely to be found.","title":"How to get good results"},{"location":"version-change-log/","text":"16th December 2021 Added Toonmoji HD, Caricature HD, and Comic HD models 25th July 2021 Added comic model 15th February 2021 Added the Toonify HD model Added a new caricature model v0.1.0 - 27th October 2020 Added new model endpoints v0.0.1 - 13th October 2020 Added crop_edges option Added proceed_without_face option","title":"Version change log"},{"location":"version-change-log/#16th-december-2021","text":"Added Toonmoji HD, Caricature HD, and Comic HD models","title":"16th December 2021"},{"location":"version-change-log/#25th-july-2021","text":"Added comic model","title":"25th July 2021"},{"location":"version-change-log/#15th-february-2021","text":"Added the Toonify HD model Added a new caricature model","title":"15th February 2021"},{"location":"version-change-log/#v010-27th-october-2020","text":"Added new model endpoints","title":"v0.1.0 - 27th October 2020"},{"location":"version-change-log/#v001-13th-october-2020","text":"Added crop_edges option Added proceed_without_face option","title":"v0.0.1 - 13th October 2020"}]}